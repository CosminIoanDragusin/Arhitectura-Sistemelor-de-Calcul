6.	Sa se scrie o functie iterativa my-length-iterative care are acelasi 
comportament ca si functia anterioara.
iterativa:
(defun my-length-IT  (l)
(setq s 0)
 (loop for i in l do 
   (setq s (+ 1 s))
 )
 (return-from my-length-IT s)
)

(setq l '( 5 6 1 2 9))
(print (my-length-IT l))
7.	Sa se scrie o functie recursiva my-sum-of-digits care primeste ca parametru un numar
 si calculeaza suma cifrelor acestuia. In cazul in care argumentul functiei nu este un 
 numar intreg, se va afisa un mesaj de eroare corespunzator. 
Daca numarul este negativ, atunci se va afisa un mesaj de eroare corespunzator.

(defun my-sum-of-digits  (n)
 (cond ((NOT (integerp n)) (return-from my-sum-of-digits "nu este intreg"))
       ((< n 0) (return-from my-sum-of-digits "este negativ"))
       ((= n 0) 0)
       (t (+ (mod n 10) (my-sum-of-digits (truncate n 10))))
 )
)

(print (my-sum-of-digits 1234))

8.	Aceeasi cerinta â€“ varianta nerecursiva.

(defun my-sum-of-digits  (n)
 (cond ((NOT (integerp n)) (return-from my-sum-of-digits "nu este intreg"))
       ((< n 0) (return-from my-sum-of-digits "este negativ"))
 )
 (setq s 0)
 (setq r n)
  (loop while ( /= r 0) do
    (progn 
        (setq s (+ s (mod r 10)))
        (setq r (truncate r 10))
    )
)
(return-from my-sum-of-digits s)
)

(print (my-sum-of-digits 1234))
EXEMPLE LA: http://sandbox.mc.edu/~bennet/cs231/examples/loops.html

9.	Sa se scrie o functie remove-duplicates care primeste ca parametru o lista de numere intregi 
si  elimina elementele duplicate din aceasta. Nu e necesara verificarea argumentului functiei, 
el va fi  intotdeauna in formatul asteptat. 

FUNCTII DE CAUTARE INTR-O LISTA:
(print (member 2 '(1 2 3)) )
(print (position  2 '(1 2 3)) )
(print (find 4 '(1 2 3)) )

(defun remove-duplicates-it(l)
(if (null l) (return-from remove-duplicates "lista goala"))
(setq rez '())
(setq rez (append (list (car l)) rez))
(print rez)
(loop for i in l do
    (if (NOT (numberp (position i rez)))
        (setq rez (append rez (list i)))
    )
)
(return-from remove-duplicates-it rez)
)

(print (remove-duplicates-it '(1 2 1 3 2)))


10.	Sa se scrie o functie my-palindrome care primeste ca parametru o lista 
si verifica daca lista respectiva este palindrom. Valoarea returnata va fi un mesaj corespunzator.

var1:
(defun my-palindrome  (l)
(if (null l) (return-from remove-duplicates "lista goala"))
(setq rez (reverse l))
(loop for i in l do
    (if (NOT (= (position i l) (position i rez)))
        (return-from my-palindrome "nu este palindrom")
    )
)
(return-from my-palindrome "este palindrom")
)

(print (my-palindrome '(1 2 1 3)))

var2:
(defun my-palindrome  (l)
(if (null l) (return-from remove-duplicates "lista goala"))
(setq rez (reverse l))
(loop for i from 0 to (- (length l) 1) do
    (if (NOT (= (nth i l) (nth i rez)))
        (return-from my-palindrome "nu este palindrom")
    )
)
(return-from my-palindrome "este palindrom")
)

11.	Sa se scrie o functie my-binary-search care primeste ca parametri o lista si un numar n intreg si verifica 
folosind algorimtul recursiv de cautare binara daca n se afla printre elementele listei. In cazul in care n este 
gasit, se va afisa pozitia acestuia (elementele listei sunt indexate de la 0). Altfel, se va afisa -1. 
Se va verifica daca lista primita ca parametru contine doar numere intregi. In cazul in care lista nu este corecta,
se va afisa un mesaj corespunzator.

documentatie https://www.geeksforgeeks.org/binary-search/
FUNCTIA nth RETURNEAZA ELEMENTUL DE PE POZITIA X DINTR-O LISTA

(defun check (l)
    (loop for i in l do
        (if (NOT (integerp i)) (return-from check nil))
    )
    (return-from check t)
)

(defun recursive_binary_search (l n p r)
    (if (> p r) 
        (return-from recursive_binary_search -1)
        (progn 
            (setq q (truncate ( + p r) 2))
            (cond (( = (nth q l) n) (return-from recursive_binary_search q))
                  (( < (nth q l) n) (recursive_binary_search l n (+ q 1) r))
                  ( t (recursive_binary_search l n p (- q 1)))
            )
         )
    )
)

(defun my-binary-search  (l n)
    (if (NOT (check l)) 
        (return-from my-binary-search "nu este buna lista")
        (recursive_binary_search l n 0 (- (length l) 1))
    )
)

(print (my-binary-search '(1 2 1 3) 6))

ITERATIV

(defun check (l)
    (loop for i in l do
        (if (NOT (integerp i)) (return-from check nil))
    )
    (return-from check t)
)

(defun binary_search-it (l lung n)
    (setq p 0)
    (setq r (- lung 1))
    (setq q (truncate ( + r p) 2))
    (setq counter 0)
    (loop while (OR ( < p r) (= p r)) do
        (progn (setq counter ( + counter 1))
               (cond ((= (nth q l) n) (return-from binary_search-it q))
                     ((< (nth q l) n) 
                        (progn 
                            (setq p ( + q 1))
                            (setq q (truncate (+ r p) 2))
                     ))
                     (t (progn 
                            (setq r (- q 1))
                            (setq q (truncate (+ r p) 2))
                     ))
               
               )
        )
        
    )
    (return-from binary_search-it -1 )
)

(defun my-binary-search  (l n)
    (if (NOT (check l)) 
        (return-from my-binary-search "nu este buna lista")
        (binary_search-it l (length l) n)
    )
    
)

(print (my-binary-search '(1 2 1 3) 2))

12.	Sa se scrie o functie recursiva my-list-print care primeste ca parametru o lista si afiseaza elementele acesteia,
 cate unul pe fiecare linie. Daca lista este vida, se va afisa un mesaj corespunzator.
 RECURSIV:
 (defun my-list-print (l)
    (if (null l) 
        (return-from my-list-print "lista este goala")
        (progn 
            (print (car l))
            (my-list-print (cdr l))
        )
    
    )
)

(setq l '(1 2 3 4))
(my-list-print l)
 
 ITERATIV:
 (defun my-list-print (l)
    (if (null l) (return-from my-list-print "lista este goala"))
    (loop for i in l do
        (print i)
    )
)

(setq l '(1 2 3 4))
(my-list-print l)

13.	Sa se scrie o functie nerecursiva factorial-iterative care primeste ca parametru un numar n si calculeaza 
valoarea n! = 1*2*3* ... *n, unde 0! = 1. Daca n este negativ se va afisa un mesaj corespunzator.
 (defun factorial-iterative (n)
(setq p 1)
(if (< n 0) (return-from factorial-iterative "nr negativ"))
(loop for i from 1 to n do
    (setq p (* p i))
)
(return-from factorial-iterative p)
)

(print (factorial-iterative 4))

recursiv:
 (defun factorial-recursiv (n)
(cond ((< n 0) (return-from factorial-recursiv "nr negativ"))
      ( (= n 0) 1)
      (t (* n (factorial-recursiv (- n 1))))
)
)

(print (factorial-recursiv -4))

14.	Sa se scrie o functie recursiva even-remove care primeste ca parametru o lista si elimina toate elementele care sunt 
numere pare. Se va verifica daca lista este formata doar din numere intregi pozitive. In caz contrar, se va afisa un mesaj
corespunzator.

(defun check (l)
    (loop for i in l do
        (if (OR (NOT (integerp i)) (< i 0)) (return-from check nil) )
    )
    (return-from check t)
)


(defun even-remove (l)
(cond ((NOT (check l)) (return-from even-remove "nu este ok formatata"))
      ((null l) '())
      ( (evenp (car l))( append (list (car l)) (even-remove (cdr l))))
      (t (even-remove (cdr l)))
)
)

(print (even-remove '(1 2 3 5 6 8)))